package bigdata_lab;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.*;// in hadoop installing dir may exits hbase jar
import org.apache.hadoop.hbase.client.*;
import org.apache.hadoop.hbase.util.Bytes;
import java.io.IOException;

public class HbaseOps {
	public static Configuration configuration;
	public static Connection connection;
	public static Admin admin;
	public static Long ts;	// timeStamp
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		String[] book_fields = {"bookName","author"};
		createTable("book",book_fields);
		
		String[] book_famliy={"bookName:a","author:b"};
		String[] book_record1={"Database System Concept","SongTq"};
		String[] book_record2={"Thinking in Java","Wangdashuai"};
		String[] book_record3={"Data Mining","Wangjint"};
		addRecord("book","val_60$",book_famliy,book_record1);
		addRecord("book","val_30$",book_famliy,book_record2);
		addRecord("book","val_30$",book_famliy,book_record3);
		
		scanColum("book","bookName");
		
		modifyData("book","val_60$","author:b");
		// deleteRow("book","val_60");
		
	}
	public static void init(){
		// create a connection
		configuration = HBaseConfiguration.create();
		configuration.set("hbase.rootdir", "hdfs://localhost:9000/hbase");
		try{
			connection = ConnectionFactory.createConnection(configuration);
			admin = connection.getAdmin();
		}catch(IOException e){
			e.printStackTrace();
		}
	}
	public static void close(){
		// close the connection
		try{
			if(admin != null){
				admin.close();
			}
			if(null != connection){
				connection.close();
			}
		}catch(IOException e){
			e.printStackTrace();
		}
	}
	/*
	 * @param name
	 * @param fields
	 */
	public static void createTable(String name, String[] fields){
		init();
		
		try{
			TableName tableName = TableName.valueOf(name);
			// If exits specified table, delete the old table first, then create a new one.
			if(admin.tableExists(tableName)){
			    if (admin.isTableEnabled(tableName)) {
			        admin.disableTable(tableName);
			    }
				System.out.print("Replace the old table.");
				admin.deleteTable(tableName);
				
			}
			HTableDescriptor htableDes = new HTableDescriptor(tableName);
			for(String str :fields){
				HColumnDescriptor family = new HColumnDescriptor(str);
				htableDes.addFamily(family);
			}
			
			admin.createTable(htableDes);
			
			
		}catch(IOException e){
			e.printStackTrace();
		}
		
		close();
	}
	/*
	 * @param tableName 表名
	 * @param row 行键
	 * @param fields 列族
	 * 	s中每个元素如果对应的列族下还有相应的列限定符的话，用“columnFamily:column”表示。
	 * 	例如，同时向“Math”、“Computer Science”、“English”三列添加成绩时，
	 * 	字符串数组fields为{“Score:Math”,”Score:Computer Science”,”Score:English”}，
	 * 	数组values存储这三门课的成绩。
	 * @param values 数据
	 * 
	 * */
	public static void addRecord(String tableName, String row, 
			String[] fields, String[] values) throws IOException{
		init();
		
		Table table = connection.getTable(TableName.valueOf(tableName));
		Put put = new Put(Bytes.toBytes(row));// 指定放到哪行
		// 首先需要解析field,例{“Score:Math”,"Score:Englist"},Score -> family, Math->qualifier
		for(int i = 0 ; i < fields.length; i ++){
			String[] cols = fields[i].split(":");
			// 如果addRecord()中没有写列族。那么cols[0]直接可以确定
			if(cols.length > 1){	// 有列族
				String family = cols[0];
				String qulifier = cols[1];
				put.addColumn(Bytes.toBytes(family), Bytes.toBytes(qulifier), Bytes.toBytes(values[i]));
			}
			
		}
		table.put(put);
		table.close();
		
		close();
	}
	/*
	 * @param tableName
	 * @param column,eg.Score:Math
	 */
	public static void scanColum(String tableName, String column) throws IOException{
		init();
		
		Table table = connection.getTable(TableName.valueOf(tableName));
		Scan scan = new Scan();
		scan.addFamily(Bytes.toBytes(column));
		ResultScanner scanner = table.getScanner(scan);		
		for(Result result = scanner.next(); result != null; result = scanner.next()){
			showCell(result);
		}
		table.close();
		close();
	}
	public static void showCell(Result result){
        Cell[] cells = result.rawCells();
        for (Cell cell : cells) {
            System.out.println("RowName:" + new String(CellUtil.cloneRow(cell)) + " ");
            System.out.println("Timetamp:" + cell.getTimestamp() + " ");
            System.out.println("column Family:" + new String(CellUtil.cloneFamily(cell)) + " ");
            System.out.println("row Name:" + new String(CellUtil.cloneQualifier(cell)) + " ");
            System.out.println("value:" + new String(CellUtil.cloneValue(cell)) + " ");
        }

	}
	public static void modifyData(String tableName, String row, String column) throws IOException{

		init();
		
		Table table = connection.getTable(TableName.valueOf(tableName));
		Put put = new Put(Bytes.toBytes(row));
		Scan scan = new Scan();
		ResultScanner resultScanner = table.getScanner(scan);
        for (Result r : resultScanner) {
            for (Cell cell : r.getColumnCells(row.getBytes(), column.getBytes())) {
                ts = cell.getTimestamp();
            }
        }
        put.addColumn(row.getBytes(), column.getBytes(), ts, column.getBytes());
		table.put(put);
		table.close();
		close();
		
	}
	public static void deleteRow(String tableName, String row)throws IOException{
		init();
		Table table = connection.getTable(TableName.valueOf(tableName));
		Delete del = new Delete(Bytes.toBytes(row));
		table.delete(del);
		System.out.println("Delete table:"+tableName+"row"+row+"successfully!");
		table.close();
		close();
	}
	
}


