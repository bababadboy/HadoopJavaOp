package bigdata_lab;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.*;// in hadoop installing dir may exits hbase jar
import org.apache.hadoop.hbase.client.*;
import org.apache.hadoop.hbase.util.Bytes;
import java.io.IOException;

public class HbaseOps {
	public static Configuration configuration;
	public static Connection connection;
	public static Admin admin;
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
	}
	public static void init(){
		// create a connection
		configuration = HBaseConfiguration.create();
		configuration.set("hbase.rootdir", "hdfs://localhost:9000/hbase");
		try{
			connection = ConnectionFactory.createConnection(configuration);
			admin = connection.getAdmin();
		}catch(IOException e){
			e.printStackTrace();
		}
	}
	public static void close(){
		// close the connection
		try{
			if(admin != null){
				admin.close();
			}
			if(null != connection){
				connection.close();
			}
		}catch(IOException e){
			e.printStackTrace();
		}
	}
	public static void createTable(String name, String[] fields){
		// create a table
		init();
		
		try{
			TableName tableName = TableName.valueOf(name);
			// If exits specified table, delete the old table first, then create a new one.
			if(admin.tableExists(tableName)){
				System.out.print("Replace the old table.");
				admin.deleteTable(tableName);
				
			}
			HTableDescriptor htableDes = new HTableDescriptor(tableName);
			
			
			admin.createTable(htableDes);
			
			
		}catch(IOException e){
			e.printStackTrace();
		}
		
		close();
	}
	public static void addRecord(){
		// add a record
	}
	public static void scanColum(){
		// scan 
	}
	public static void modifyData(){
		
	}
	public static void deleteRow(){
		
	}
	
}


